openapi: 3.0.0
info:
  title: HighPerformance Api documentation
  version: 1.0.0
  description: Documentation of the REST API
servers:
  - url: http://localhost:8080/api
    description: Local development server
tags:
  - name: User
    description: Endpoints for user authentication
  - name: Salesman
    description: Endpoints for managing salesmen
  - name: Products
    description: Endpoints for managing products and sales-orders
  - name: Bonus
    description: Endpoints for calculating and fetching bonuses
  - name: OrangeHRM
    description: Endpoints for fetching and updating data from OrangeHRM
paths:
  /login:
    post:
      tags:
        - User
      summary: User login
      description: Login with username and password
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Credentials'
      responses:
        '200':
          description: Login successful
          content:
            text/plain:
              schema:
                type: string
                example: Login successful
        '401':
          description: Unauthorized
    get:
      tags:
        - User
      summary: Check if user is logged in
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Credentials'
      responses:
        '200':
          description: User is logged in
          content:
            application/json:
              schema:
                type: object
                properties:
                  loggedIn:
                    type: boolean
        '401':
          description: Unauthorized
    delete:
      tags:
        - User
      summary: User logout
      description: Logout the current user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Credentials'
      responses:
        '200':
          description: Logout successful
          content:
            text/plain:
              schema:
                type: string
                example: Logout successful
        '401':
          description: Unauthorized
  /register:
    post:
      tags:
        - User
      summary: Register a new user
      description: Register a new user with username and password
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserRegister'
      responses:
        '201':
          description: User registered successfully
        '400':
          description: Bad request
  /checkUsername:
    get:
      tags:
        - User
      summary: Check if username is valid
      description: Checks if the username is registerd in either OpenCRX or Odoo
      parameters:
        - name: username
          in: query
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Username is valid
          content:
            application/json:
              schema:
                type: object
                properties:
                  valid:
                    type: boolean
        '400':
          description: Bad request
  /user:
    get:
      tags:
        - User
      summary: Get user information
      description: Retrieve information about the authenticated user
      security:
        - bearerAuth: []
      responses:
        '200':
          description: User information retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '401':
          description: Unauthorized
  /salesman:
    get:
      tags:
        - Salesman
      summary: Get all salesmen
      description: Retrieve a list of all salesmen
      parameters:
        - name: sid
          in: query
          required: false
          schema:
            type: string
      security:
        - bearerAuth: []
      responses:
        '200':
          description: List of salesmen retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Salesman'
        '401':
          description: Unauthorized
  /salesman/{id}:
    get:
      tags:
        - Salesman
      summary: Get a salesman by ID
      description: Retrieve a salesman by their ID
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Salesman retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Salesman'
        '404':
          description: Salesman not found
        '401':
          description: Unauthorized
  /products/sales:
    get:
      tags:
        - Products
      summary: Get all sales
      description: Retrieve a list of all sales
      security:
        - bearerAuth: []
      parameters:
        - name: sid
          in: query
          required: false
          schema:
            type: string
        - name: year
          in: query
          required: false
          schema:
            type: string
      responses:
        '200':
          description: List of sales retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Sale'
        '401':
          description: Unauthorized
  /salesmanohrm:
    get:
      tags:
        - OrangeHRM
      summary: Get all salesmen from OrangeHRM
      description: Retrieve a list of all salesmen from OrangeHRM
      security:
        - bearerAuth: []
      responses:
        '200':
          description: List of salesmen from OrangeHRM retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/SalesmanOHRM'
        '401':
          description: Unauthorized
  /salesmanohrm/{id}:
    get:
      tags:
        - OrangeHRM
      summary: Get salesman from OrangeHRM by ID
      description: Retrieve information about a specific salesman from OrangeHRM
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Salesman information from OrangeHRM retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SalesmanOHRM'
        '401':
          description: Unauthorized
  /odoo/salesman:
    get:
      tags:
        - Odoo
      summary: Get all salesmen from Odoo
      description: Retrieve a list of all salesmen from Odoo
      security:
        - bearerAuth: []
      responses:
        '200':
          description: List of salesmen from Odoo retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/SalesmanOdoo'
        '401':
          description: Unauthorized
  /odoo/salesman/{id}:
    get:
      tags:
        - Odoo
      summary: Get salesman from Odoo by ID
      description: Retrieve information about a specific salesman from Odoo
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Salesman information from Odoo retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SalesmanOdoo'
        '401':
          description: Unauthorized
  /odoo/bonus/{id}:
    get:
      tags:
        - Odoo
      summary: Get bonus from Odoo by ID
      description: Retrieve bonus information from Odoo by ID
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Bonus information from Odoo retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OdooBonus'
        '401':
          description: Unauthorized
  /eval:
    get:
      tags:
        - Evaluation
      summary: Get all evaluations
      description: Retrieve a list of all evaluations
      parameters:
        - name: sid
          in: query
          required: false
          schema:
            type: string
        - name: year
          in: query
          required: false
          schema:
            type: string
        - name: approvalStatus
          in: query
          required: false
          schema:
            $ref: '#/components/schemas/ApprovalStatus'

      security:
        - bearerAuth: []
      responses:
        '200':
          description: List of evaluations retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Evaluation'
        '401':
          description: Unauthorized
    put:
      tags:
        - Evaluation
      summary: Update evaluation
      description: Update an existing evaluation
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Evaluation'
      security:
        - bearerAuth: [ ]
      responses:
        '200':
          description: Evaluation updated successfully
        '401':
          description: Unauthorized
          post:
            tags:
              - Evaluation
            summary: Create evaluation
            description: Create a new evaluation
            parameters:
              - name: id
                in: path
                required: true
                schema:
                  type: string
              - name: year
                in: path
                required: true
                schema:
                  type: integer
            requestBody:
              required: true
              content:
                application/json:
                  schema:
                    $ref: '#/components/schemas/Evaluation'
            security:
              - bearerAuth: [ ]
            responses:
              '201':
                description: Evaluation created successfully
              '401':
                description: Unauthorized
  /eval/{id}/{year}:
    get:
      tags:
        - Evaluation
      summary: Get evaluation by ID and year
      description: Retrieve information about a specific evaluation
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
        - name: year
          in: path
          required: true
          schema:
            type: integer
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Evaluation information retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Evaluation'
        '401':
          description: Unauthorized
  /bonus/spr:
    post:
      tags:
        - Bonus
      summary: Recalculate SPR bonus
      description: Recalculate the SPR bonus
      requestBody:
        required: true
        content:
          application/json:
            schema:
                $ref: '#/components/schemas/Evaluation'
      security:
        - bearerAuth: []
      responses:
        '200':
          description: SPR bonus recalculated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SocialPerformanceRecord'
        '401':
          description: Unauthorized
components:
  schemas:
    Salesman:
      type: object
      properties:
        firstname:
          type: string
        lastname:
          type: string
        sid:
          type: string
        jobTitle:
          type: string
      required:
        - firstname
        - lastname
        - sid
        - jobTitle
    SalesmanOHRM:
      type: object
      properties:
        firstname:
          type: string
        lastname:
          type: string
        middleName:
          type: string
        code:
          type: string
        jobTitle:
          type: string
        employeeId:
          type: string
      required:
        - firstname
        - lastname
        - sid
        - jobTitle
    SalesmanOdoo:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
    Bonus:
      type: object
      properties:
        id:
          type: string
        amount:
          type: number
    Credentials:
      type: object
      properties:
        username:
          type: string
        password:
          type: string
    UserRegister:
      type: object
      properties:
        username:
          type: string
        firstname:
          type: string
        lastname:
          type: string
        email:
          type: string
        password:
          type: string
        role:
          type: string
      required:
        - username
        - firstname
        - lastname
        - email
        - password
        - role
    User:
      type: object
      properties:
        _id:
          type: string
        username:
          type: string
        firstname:
          type: string
        lastname:
          type: string
        email:
          type: string
        role:
          type: string
      required:
        - _id
        - username
        - lastname
        - role
    Sale:
      type: object
      properties:
        name:
          type: string
        activeOn:
          type: string
          format: date-time
        contractNumber:
          type: string
        priority:
          type: integer
        totalAmountIncludingTax:
          type: string
        customer:
          type: object
          properties:
            name:
              type: string
            accountRating:
              type: integer
        orders:
          type: array
          items:
            $ref: '#/components/schemas/OrderCRX'
      required:
        - name
        - activeOn
        - contractNumber
        - priority
        - totalAmountIncludingTax
        - customer
        - orders
    OrderCRX:
      type: object
      properties:
        crx_product:
          type: object
          properties:
            name:
              type: string
            productNumber:
              type: integer
        amount:
          type: string
        quantity:
          type: string
        pricePerUnit:
          type: string
        amountWithTax:
          type: string
      required:
        - crx_product
        - amount
        - quantity
        - pricePerUnit
        - amountWithTax
    Record:
      type: object
      properties:
        targetValue:
          type: number
        actualValue:
          type: number
        bonus:
          type: number
        comment:
          type: string
      required:
        - targetValue
        - actualValue
        - bonus
        - comment
    SpecifiedRecords:
      type: object
      properties:
        leadershipCompetence:
          $ref: '#/components/schemas/Record'
        opennessToEmployee:
          $ref: '#/components/schemas/Record'
        socialBehaviorToEmployee:
          $ref: '#/components/schemas/Record'
        attitudeToClients:
          $ref: '#/components/schemas/Record'
        communicationSkills:
          $ref: '#/components/schemas/Record'
        integrityToCompany:
          $ref: '#/components/schemas/Record'
    SocialPerformanceRecord:
      type: object
      properties:
        specifiedRecords:
          $ref: '#/components/schemas/SpecifiedRecords'
        totalBonus:
          type: number
      required:
        - specifiedRecords
        - totalBonus
    Order:
      type: object
      properties:
        productNumber:
          type: string
        productName:
          type: string
        clientRanking:
          type: string
        items:
          type: number
        bonus:
          type: number
        comment:
          type: string
      required:
        - productNumber
        - productName
        - clientRanking
        - items
        - bonus
        - comment
    OrderEvaluation:
      type: object
      properties:
        totalBonus:
          type: number
        orders:
          type: array
          items:
            $ref: '#/components/schemas/Order'
      required:
        - totalBonus
        - orders
    Evaluation:
      type: object
      properties:
        sid:
          type: string
          nullable: true
        year:
          type: string
        department:
          type: string
        orderEvaluation:
          $ref: '#/components/schemas/OrderEvaluation'
        socialPerformanceEvaluation:
          $ref: '#/components/schemas/SocialPerformanceRecord'
        totalBonus:
          type: number
        approvalStatus:
          $ref: '#/components/schemas/ApprovalStatus'
        comment:
          type: string
      required:
        - sid
        - year
        - department
        - orderEvaluation
        - socialPerformanceEvaluation
        - totalBonus
        - approvalStatus
        - comment
    OdooBonus:
      type: object
      properties:
        id:
          type: integer
        state:
          type: string
        employee_id:
          type: array
          items:
            - type: integer
            - type: string
        bonus_reason_id:
          type: array
          items:
            - type: integer
            - type: string
        bonus_amount:
          type: number
      required:
        - id
        - state
        - employee_id
        - bonus_reason_id
        - bonus_amount
    ApprovalStatus:
      type: string
      enum:
        - NONE
        - CEO
        - HR
        - SALESMAN